<?php

namespace App\Filament\Resources\CustomEvents\Schemas;

use App\Models\Country;
use App\Models\CustomEvent;
use Filament\Forms\Components\ColorPicker;
use Filament\Forms\Components\DateTimePicker;
use Filament\Forms\Components\RichEditor;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Toggle;
use Filament\Schemas\Components\Utilities\Get;
use Filament\Schemas\Components\Utilities\Set;
use Filament\Schemas\Schema;

class CustomEventForm
{
    public static function configure(Schema $schema): Schema
    {
        return $schema
            ->components([
                // Hauptinformationen
                TextInput::make('title')
                    ->label('Titel')
                    ->required()
                    ->maxLength(255)
                    ->placeholder('z.B. Brandschutz√ºbung Frankfurt')
                    ->columnSpanFull(),

                // Beschreibung-Feld ausgeblendet
                Textarea::make('description')
                    ->label('Beschreibung')
                    ->rows(3)
                    ->placeholder('Detaillierte Beschreibung des Events...')
                    ->hidden(),

                // Popup-Inhalt als Beschreibung
                RichEditor::make('popup_content')
                    ->label('Beschreibung')
                    ->toolbarButtons([
                        'bold',
                        'italic',
                        'underline',
                        'strike',
                        'link',
                        'bulletList',
                        'orderedList',
                        'h2',
                        'h3',
                        'blockquote',
                        'codeBlock',
                    ])
                    ->helperText('HTML-Inhalt f√ºr die Popup-Anzeige. Unterst√ºtzt Formatierung und Links.')
                    ->placeholder('Beschreiben Sie hier den Inhalt, der im Popup angezeigt werden soll...')
                    ->columnSpanFull(),

                Select::make('event_type')
                    ->label('Event-Typ')
                    ->options(CustomEvent::getEventTypeOptions())
                    ->required()
                    ->searchable(),

                Select::make('country_id')
                    ->label('Land')
                    ->options(fn () => Country::query()
                        ->select('id', 'name_translations')
                        ->get()
                        ->mapWithKeys(fn (Country $c) => [$c->id => $c->getName('de')])
                        ->toArray()
                    )
                    ->searchable()
                    ->preload(),

                Select::make('priority')
                    ->label('Priorit√§t')
                    ->options(CustomEvent::getPriorityOptions())
                    ->default('medium')
                    ->required(),

                TextInput::make('category')
                    ->label('Kategorie')
                    ->placeholder('z.B. √úbung, Notfall, Wartung')
                    ->maxLength(100),

                TextInput::make('tags')
                    ->label('Tags')
                    ->placeholder('tag1, tag2, tag3')
                    ->helperText('Tags durch Kommas getrennt eingeben'),

                // Status & Zeit
                Toggle::make('is_active')
                    ->label('Aktiv')
                    ->default(true)
                    ->helperText('Event auf der Karte anzeigen'),

                DateTimePicker::make('start_date')
                    ->label('Startdatum')
                    ->required()
                    ->default(now())
                    ->displayFormat('d.m.Y H:i'),

                DateTimePicker::make('end_date')
                    ->label('Enddatum')
                    ->displayFormat('d.m.Y H:i')
                    ->helperText('Optional - f√ºr zeitlich begrenzte Events'),

                // Koordinaten
                TextInput::make('coordinates_paste')
                    ->label('Google Maps Koordinaten einf√ºgen')
                    ->placeholder('z.B. 50.1109, 8.6821 oder 50¬∞06\'39.2"N 8¬∞40\'55.6"E')
                    ->helperText('Koordinaten aus Google Maps kopieren und hier einf√ºgen')
                    ->live(onBlur: true)
                    ->afterStateUpdated(function (Set $set, Get $get, ?string $state) {
                        if ($state) {
                            $coordinates = self::parseCoordinates($state);
                            if ($coordinates) {
                                $set('latitude', $coordinates['lat']);
                                $set('longitude', $coordinates['lng']);
                            }
                        }
                    }),

                TextInput::make('latitude')
                    ->label('Breitengrad')
                    ->required()
                    ->numeric()
                    ->step(0.000000000000001)
                    ->placeholder('50.1109'),

                TextInput::make('longitude')
                    ->label('L√§ngengrad')
                    ->required()
                    ->numeric()
                    ->step(0.000000000000001)
                    ->placeholder('8.6821'),

                // Marker-Konfiguration
                ColorPicker::make('marker_color')
                    ->label('Marker-Farbe')
                    ->default('#FF0000')
                    ->helperText('Hauptfarbe des Markers'),

                Select::make('marker_icon')
                    ->label('FontAwesome Symbol')
                    ->options([
                        'fa-map-marker' => 'üìç Standard Marker',
                        'fa-exclamation-triangle' => '‚ö†Ô∏è Warnung',
                        'fa-fire' => 'üî• Feuer',
                        'fa-tint' => 'üíß Wasser',
                        'fa-cloud' => '‚òÅÔ∏è Wolke',
                        'fa-bolt' => '‚ö° Blitz',
                        'fa-building' => 'üè¢ Geb√§ude',
                        'fa-car' => 'üöó Fahrzeug',
                        'fa-plane' => '‚úàÔ∏è Flugzeug',
                        'fa-ship' => 'üö¢ Schiff',
                        'fa-train' => 'üöÇ Zug',
                        'fa-bus' => 'üöå Bus',
                        'fa-ambulance' => 'üöë Krankenwagen',
                        'fa-fire-extinguisher' => 'üßØ Feuerl√∂scher',
                        'fa-shield-alt' => 'üõ°Ô∏è Schutz',
                        'fa-user-shield' => 'üë§ Benutzer-Schutz',
                        'fa-exclamation-circle' => '‚ùå Ausrufezeichen',
                        'fa-info-circle' => '‚ÑπÔ∏è Information',
                        'fa-check-circle' => '‚úÖ Best√§tigung',
                        'fa-clock' => 'üïê Uhr',
                        'fa-calendar' => 'üìÖ Kalender',
                        'fa-flag' => 'üö© Flagge',
                        'fa-star' => '‚≠ê Stern',
                        'fa-heart' => '‚ù§Ô∏è Herz',
                        'fa-home' => 'üè† Haus',
                        'fa-hospital' => 'üè• Krankenhaus',
                        'fa-school' => 'üè´ Schule',
                        'fa-university' => 'üéì Universit√§t',
                        'fa-industry' => 'üè≠ Industrie',
                        'fa-shopping-cart' => 'üõí Einkaufswagen',
                        'fa-utensils' => 'üç¥ Restaurant',
                        'fa-coffee' => '‚òï Caf√©',
                        'fa-beer' => 'üç∫ Bar',
                        'fa-hotel' => 'üè® Hotel',
                        'fa-campground' => 'üèïÔ∏è Camping',
                        'fa-mountain' => '‚õ∞Ô∏è Berg',
                        'fa-tree' => 'üå≥ Baum',
                        'fa-leaf' => 'üçÉ Blatt',
                        'fa-sun' => '‚òÄÔ∏è Sonne',
                        'fa-moon' => 'üåô Mond',
                        'fa-cloud-rain' => 'üåßÔ∏è Regen',
                        'fa-snowflake' => '‚ùÑÔ∏è Schnee',
                        'fa-wind' => 'üí® Wind',
                        'fa-thermometer-half' => 'üå°Ô∏è Temperatur',
                        'fa-tachometer-alt' => 'üìä Geschwindigkeit',
                        'fa-weight-hanging' => '‚öñÔ∏è Gewicht',
                        'fa-ruler' => 'üìè Lineal',
                        'fa-compass' => 'üß≠ Kompass',
                        'fa-map' => 'üó∫Ô∏è Karte',
                        'fa-globe' => 'üåç Globus',
                        'fa-location-arrow' => 'üìç Pfeil',
                        'fa-crosshairs' => 'üéØ Ziel',
                        'fa-bullseye' => 'üéØ Zielscheibe',
                        'fa-dot-circle' => 'üîò Punkt',
                        'fa-circle' => '‚≠ï Kreis',
                        'fa-square' => '‚¨ú Quadrat',
                        'fa-diamond' => 'üíé Diamant',
                        'fa-hexagon' => '‚¨° Sechseck',
                        'fa-octagon' => '‚¨¢ Achteck',
                    ])
                    ->default('fa-map-marker')
                    ->searchable()
                    ->helperText('Symbol f√ºr den Marker'),

                ColorPicker::make('icon_color')
                    ->label('Symbol-Farbe')
                    ->default('#FFFFFF')
                    ->helperText('Farbe des Symbols'),

                Select::make('marker_size')
                    ->label('Marker-Gr√∂√üe')
                    ->options(CustomEvent::getMarkerSizeOptions())
                    ->default('medium')
                    ->required()
                    ->helperText('Gr√∂√üe des Markers auf der Karte'),

            ]);
    }

    /**
     * Parse coordinates from various formats
     */
    private static function parseCoordinates(string $input): ?array
    {
        $input = trim($input);

        // Format: 50.1109, 8.6821
        if (preg_match('/^(-?\d+\.?\d*)\s*,\s*(-?\d+\.?\d*)$/', $input, $matches)) {
            return [
                'lat' => (float) $matches[1],
                'lng' => (float) $matches[2],
            ];
        }

        // Format: 50¬∞06'39.2"N 8¬∞40'55.6"E
        if (preg_match('/(\d+)¬∞(\d+)\'([\d.]+)"([NS])\s+(\d+)¬∞(\d+)\'([\d.]+)"([EW])/', $input, $matches)) {
            $lat = (float) $matches[1] + (float) $matches[2] / 60 + (float) $matches[3] / 3600;
            $lng = (float) $matches[5] + (float) $matches[6] / 60 + (float) $matches[7] / 3600;

            if ($matches[4] === 'S') {
                $lat = -$lat;
            }
            if ($matches[8] === 'W') {
                $lng = -$lng;
            }

            return ['lat' => $lat, 'lng' => $lng];
        }

        // Format: 50.1109¬∞N, 8.6821¬∞E
        if (preg_match('/(\d+\.?\d*)¬∞([NS])\s*,\s*(\d+\.?\d*)¬∞([EW])/', $input, $matches)) {
            $lat = (float) $matches[1];
            $lng = (float) $matches[3];

            if ($matches[2] === 'S') {
                $lat = -$lat;
            }
            if ($matches[4] === 'W') {
                $lng = -$lng;
            }

            return ['lat' => $lat, 'lng' => $lng];
        }

        return null;
    }
}
